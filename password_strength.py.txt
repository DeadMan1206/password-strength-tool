import re
from collections import Counter
import string
try:
    from zxcvbn import zxcvbn  # For advanced password entropy analysis
    zxcvbn_available = True
except ImportError:
    zxcvbn_available = False

def assess_password_strength(password):
    """
    Assess the strength of a password based on length, complexity, uniqueness, advanced metrics, and entropy analysis.
    Returns feedback and a strength score out of 100.
    """
    if not password:
        return 0, ["Password cannot be empty."]

    score = 0
    feedback = []

    # Length check
    if len(password) < 8:
        feedback.append("Password is too short. Minimum length should be 8 characters.")
    elif len(password) <= 12:
        score += 20
        feedback.append("Password length is acceptable but could be longer.")
    else:
        score += 30
        feedback.append("Password length is strong.")

    # Complexity checks
    if re.search(r'[A-Z]', password):
        score += 20
    else:
        feedback.append("Add uppercase letters to improve strength.")

    if re.search(r'[a-z]', password):
        score += 20
    else:
        feedback.append("Add lowercase letters to improve strength.")

    if re.search(r'[0-9]', password):
        score += 15
    else:
        feedback.append("Include numbers to enhance security.")

    if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        score += 15
    else:
        feedback.append("Use special characters to make the password stronger.")

    # Uniqueness checks
    unique_chars = len(set(password))
    if unique_chars < len(password) * 0.7:
        feedback.append("Password contains too many repeated characters. Use more unique characters.")
    else:
        score += 10

    # Advanced metrics
    # Check for dictionary words
    common_words = ["password", "123456", "qwerty", "admin", "welcome"]
    if any(word in password.lower() for word in common_words):
        feedback.append("Password contains common or easily guessable words. Avoid using such words.")
        score -= 10

    # Consecutive characters check
    consecutive_chars = any(password[i] == password[i+1] for i in range(len(password)-1))
    if consecutive_chars:
        feedback.append("Password contains consecutive repeated characters. Avoid such patterns.")
        score -= 5

    # Check for keyboard patterns (e.g., qwerty, asdf)
    keyboard_patterns = ["qwerty", "asdf", "zxcv", "12345"]
    if any(pattern in password.lower() for pattern in keyboard_patterns):
        feedback.append("Password contains keyboard patterns. Avoid such predictable sequences.")
        score -= 10

    # Avoid passwords with only letters or only numbers
    if password.isdigit() or password.isalpha():
        feedback.append("Password should not consist of only letters or only numbers. Use a mix of both.")
        score -= 10

    # Check entropy with zxcvbn if available
    if zxcvbn_available:
        try:
            zxcvbn_result = zxcvbn(password)
            entropy_score = zxcvbn_result['score'] * 20
            score += entropy_score
            if 'feedback' in zxcvbn_result:
                warning = zxcvbn_result['feedback'].get('warning', "")
                suggestions = zxcvbn_result['feedback'].get('suggestions', [])
                if warning:
                    feedback.append(f"Entropy analysis warning: {warning}")
                if suggestions:
                    feedback.extend(f"Suggestion: {s}" for s in suggestions)
        except Exception as e:
            feedback.append("Entropy analysis could not be performed due to an error.")
    else:
        feedback.append("Advanced entropy analysis is unavailable. Install the zxcvbn module for enhanced feedback.")

    # Final feedback
    if score >= 80:
        feedback.append("Your password is strong.")
    elif score >= 50:
        feedback.append("Your password is moderate. Consider making improvements.")
    else:
        feedback.append("Your password is weak. Consider making significant changes.")

    # Cap score between 0 and 100
    score = max(0, min(100, score))

    return score, feedback

# Example usage
if __name__ == "__main__":
    # Use a predefined password instead of input to avoid I/O issues
    predefined_password = "ExamplePassword123!"
    print(f"Testing with predefined password: {predefined_password}")
    strength_score, suggestions = assess_password_strength(predefined_password)
    print(f"Password Strength Score: {strength_score}/100")
    print("Feedback:")
    for suggestion in suggestions:
        print(f"- {suggestion}")
